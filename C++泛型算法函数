1、只读算法1：
   find函数：查找值是否存在
   调用方式：find（首迭代器，尾迭代器，待查找值） auto result = find(v.cbegin, v.cend, val)
   返回值：若存在该值，返回指向该值的迭代器；否则，返回尾迭代器
   举例：
    vector<double> nums{1.1,3.2,4.3,1.5,3,2,1};
    auto sum = find(nums.cbegin(), nums.cend(),2.1);
    if(sum != nums.end()){
      cout << *sum << endl;}
    else
      cout << "无此值" << endl;
   

2、只读算法1：
    count函数：计算给定值在序列中出现的次数
    调用方式：count(首迭代器，尾迭代器，待统计值)  auto res = count(v.cbegin, v.cend, val)
    返回值：给定值出现的次数
    vector<double> nums{1.1,3.2,4.3,1.5,3,2,1};
    auto res = count(nums.cbegin(), nums.cend(),2);
    
3、只读算法3：
    accumulate函数：计算给定元素之和；连接字符串；（所有支持+操作的序列）
    调用方式：accumulate(首迭代器，尾迭代器，求和初始值)
             int sum = accumulate（vec.cbegin(), vec.cend(), 0）
             string sum = accumulate(vec.cbegin(), vec.cend(), string(""))
    返回值：求和结果
             
   
4、只读算法4:
    equal函数：判断两个序列是否含有相同的值。 假设第二个序列至少与第一个序列一样长
    调用方式：equal(第一个序列的元素范围，第二个序列的首元素)
    返回值：True or False
    
    equal(roster1.cbegin(), roster1.cend(), roster2.cbegin());
    
    
5、写算法1：
    fill填充函数：将给定值赋予输入序列中的每个元素
    调用方式：fill(vec.cbegin(), vec.cend(), val);
    返回值：原位修改给定序列
    举例：
      vector<double> nums{1,2,3,4,5,6,7};
      fill(nums.begin(), nums.begin() + nums.size() / 2 , 0);
      for(auto num : nums)
      {
        cout << num << endl;
      }
     
6、写算法2：
    fill_n 函数：将给定值赋予迭代器指向的元素开始的指定个元素
    调用方式：接受一个单迭代器，一个计数值，和一个值
    
7、写算法3：
    copy函数：复制
    调用方式：接受三个迭代器，copy(待拷贝序列输入范围，目的序列起始位置)
    返回值：目的位置迭代器（递增后的值）
    举例：
      int a1[] = {1,2,3,4,5,6,7,8};
      int a2[sizeof(a1) / sizeof(*a1)]; // 保证两数组大小一致
      // res 指向拷贝到a2的尾元素之后的位置
      auto res = copy(begin(a1), end(a1), a2);
      for(auto num : a2)
      {
        cout << num << ' ';
      }
      
8、写算法4：
    replace函数：替换元素，读入一个序列，将其中所有等于给定值的元素都改为另外一个值
    调用方式：接受四个参数，迭代器范围；要搜索的值；新值
    返回值：原位修改输入序列
    
    举例：  
      vector<int> nums{1,2,3,4,1,2,3,4};
      replace(nums.begin(), nums.end(), 1, 5); // 将所有值为1的元素，改为5

      for(auto num : nums)
      {
        cout << num << ' ';
      }

       //输出：5 2 3 4 5 2 3 4 
    
    
    
  
    
    
    
    
