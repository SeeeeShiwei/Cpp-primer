第七章  类

7.3.4 友元再探
（1）函数、类均可以建立友元关系；
（2）友元关系不具有传递性，每个类负责自己的友元函数或友元类。
7.4
（1）不要把成员名字作为成员函数参数或其他局部变量使用；

7.5
（1）如果成员是const、引用，或者属于某种未提供默认构造函数的类类型，必须通过构造函数初始值列表为这些成员提供初值

class ConstRef{
public:
    ConstRef(int i); //构造函数
private:
    int i;
    const int ci; //const成员
    int &ri;  // 引用成员
}; //必须有分号，否则会要求ConstRef有返回类型。

//错误构造函数（运用赋值为const和引用初始化，更确切来说，是不能为未初始化的const成员和引用成员赋值）
ConstRef::ConstRef(int ii)
{
    i = ii;
    ci = ii;
    ri = i;
}

//正确构造函数（构造函数初始值列表初始化），显示地初始化引用和const成员
ConstRef::ConstRef(int ii) : i(ii), ci(ii),ri(i) { }

（2）在很多类中，初始化和赋值的区别事关底层效率问题：前者直接初始化数据成员，后者则先初始化再赋值；
     除效率问题外，一些数据成员必须初始化，需养成使用构造函数初始值的习惯。
（3）在类中，如果定义了其他的构造函数，最好也定义一个默认构造函数。
（4）eplicit:抑制构造函数定义的隐式转换 P265
    只对一个实参的构造函数有效
    只能在类内声明构造函数时使用，类外部定义时不应重复

第九章 顺序容器
9.3 顺序容器操作
（1）不要保存end返回的迭代器。如果在一个循环中插入/删除deque、string或vector中的元素，不要缓存end返回的迭代器，会失效。
（2）必须在每次插入操作后，重新调用end（），而不能在循环开始前保存end返回的迭代器。


